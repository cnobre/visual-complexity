---
title: "process Protograph User results"
output: html_document
---

## Setup

```{r setup}
library(tidyverse)
library(ggridges)
library(pwr) 
library(grid)
library(gtable)

library(boot)
library(bootES)

library(dplyr)

library(ggbeeswarm)

library(tidybayes)
library(cowplot)
library(broom)

theme_set(theme_tidybayes() + panel_border() + background_grid())


#df <- read.csv("../results/pilot/CSV/TidyR.csv")

# dfp <- read.csv("../results/study/CSV/participantInfoTidyR.csv")
```



## Data Cleaning / Types

```{r}

df <- read.csv("TidyR.csv")

df_acc <- df %>% 
  filter(measure=="accuracy") 


df_acc$value = as.numeric( as.character(df_acc$value ))


```



```{r , fig.width=4, fig.height=3 }

df_summary <-df_acc %>%
  group_by(prolificId,section,subtask) %>%
  summarise_at(vars(value), list(value = mean))

df_summary %>% 
  ggplot( aes(x=subtask, y=value )) +
  ylim(0,1)+
  geom_violin(trim=TRUE, fill='grey', color='grey') +
    stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 0.5, alpha=0.5) +
      geom_jitter( alpha = 0.2, width=0.05, height=0.05 ) + 

  coord_flip() +
    ylab("Task Score") + xlab("Task Name")+
   labs(
      title = 'Score Distribution',
      subtitle = ''
    )

g<-ggplot(df_summary, aes(x=subtask, y=value )) +
   geom_jitter( alpha = 0.2, width=0.05, height=0.05 ) + 
    stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 0.5, alpha=0.5) 
     
  
#+facet_grid(. ~ section )

# extract the data
mcb <- ggplot_build(g)$data[[2]]

print (mcb)
# add the labels to the plot


#ggsave(paste("violin.pdf", sep=""), width = 8, height = 3, units = "in")



```


```{r}

df_acc %>% 
  ggplot( aes(x=task, y=value) ) +
  ylim(0,1)+
  #geom_point()+
    geom_jitter( alpha = 0.2, width=0.1, height=0.1 ) + 
    stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 0.5, position = position_nudge(x=0, y=0), alpha=0.5) +
  coord_flip() 


 df_acc %>% 
   filter(section=="S1") %>% 
   ggplot( aes(x=task, y=value )) +
  ylim(0,1)+
  #geom_point()+
    
  geom_violin(trim=TRUE, fill='grey', color='grey') +
        geom_jitter( alpha = 0.1, width=0.05, height=0.05 ) + 

    stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 0.5, alpha=0.5) +

  coord_flip() +
    ylab("Task Score") + xlab("Task Name")+
   labs(
      title = 'Score Distribution',
      subtitle = ''
    )
 
 ggsave(paste("violin_ssection1.pdf", sep=""), width = 4, height = 4, units = "in")

 
 
 df_acc %>% 
   filter(section=="S2") %>% 
   ggplot( aes(x=task, y=value )) +
  ylim(0,1)+
  #geom_point()+
    
  geom_violin(trim=TRUE, fill='grey', color='grey') +
        geom_jitter( alpha = 0.1, width=0.05, height=0.05 ) + 

    stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 0.5, alpha=0.5) +

  coord_flip() +
    ylab("Task Score") + xlab("Task Name")+
   labs(
      title = 'Score Distribution',
      subtitle = ''
    )
 
 ggsave(paste("violin_ssection2.pdf", sep=""), width = 4, height = 4, units = "in")

 
 
  
  

```


```{r}

#Distribution of coding experience
df %>% 
  group_by(prolificId) %>%
  summarise_at(vars(codingExperience), list(value = mean))%>%
 ggplot( aes(x=value)) + 
  geom_histogram(stat="count")+  
  xlab("Coding Experience") + ylab("Number of Participants")+
   labs(
      title = 'Coding Experience Distribution',
      subtitle = ''
    )
   # facet_grid(condition ~ . )



#Distribution of graph experience
df %>% 
  group_by(prolificId) %>%
  summarise_at(vars(graphLiteracy), list(value = mean))%>%
 ggplot( aes(x=value)) + 
  geom_histogram(stat="count")+
   # facet_grid(condition ~ . )
  xlab("Graph Literacy") + ylab("Number of Participants")+
   labs(
      title = 'Graph Literacy Distribution',
      subtitle = ''
    )
  
#ggsave(paste("violins/",task,".pdf", sep=""), width = 10, height = 2.5, units = "in")





```


## Power Analysis

```{r}

powerAnalysisGraph <- function(m1, m2, stdev, iterNum=15){
  # stdev <- sd_duration.median
  # m1 <- mean(search$duration.median)
  # m2 <- mean(nonsearch$duration.median)
  # # m1 <- mean(foresight$duration.median)
  # # m2 <- mean(nonsearch$duration.median)
  
  iteration <- 15
  
  difference <- 0
  effectSize <- 0
  numParticipants <- 0
  
  for(step in 1:iteration)
  {
    difference[step] <- abs(m1 - m2) * (0.9 ^ (step-1))
    effectSize[step] <- difference[step] / stdev
    numParticipants[step] <- pwr.t.test( 
      d=effectSize[step], 
      sig.level=.05, 
      power=0.8, 
      type="two.sample", 
      alternative="greater" 
    )$n * 1.15 * 2
  }
  
  #dual axis code online: https://rpubs.com/kohske/dual_axis_in_ggplot2
  grid.newpage()
  
  pw <- data.frame(difference=difference, numParticipants=numParticipants, effectSize=effectSize)
  p1 <- ggplot(pw,aes(x=difference)) + geom_line(aes(y = numParticipants)) +
    scale_y_continuous(breaks = pretty(pw$numParticipants, n = 10))
  p2<- ggplot(pw,aes(x=difference)) + geom_line(aes(y = effectSize)) +
    theme(panel.background = element_rect(fill = NA))+
    scale_y_continuous(breaks = pretty(pw$effectSize, n = 10))
  p2
  
  # extract gtable
  g1 <- ggplot_gtable(ggplot_build(p1))
  g2 <- ggplot_gtable(ggplot_build(p2))
  
  # overlap the panel of 2nd plot on that of 1st plot
  pp <- c(subset(g1$layout, name == "panel", se = t:r))
  g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
  
  # axis tweaks
  ia <- which(g2$layout$name == "axis-l")
  ga <- g2$grobs[[ia]]
  ax <- ga$children[[2]]
  ax$widths <- rev(ax$widths)
  ax$grobs <- rev(ax$grobs)
  ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
  g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
  g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
  
  # draw it
  grid.draw(g)
}

```




```{r}


# Knowledge
sd_knowledge = df_acc %>% 
  filter(task == "K1") %>% 
  summarise(
    stdev = sd(value)
  )

m_static_knowledge  = df_acc %>% 
  filter(task == "K1" & condition == "static") %>% 
  summarise(
    mean = mean(value)
  )

m_animated_knowledge = df_acc %>% 
  filter(task == "K1" & condition == "animated") %>% 
  summarise(
    mean = mean(value)
  )



```



then, we apply the power analysis to the numbers calculated above




```{r}
# Knowledge Question
powerAnalysisGraph(m_static_knowledge[,1], m_animated_knowledge[,1], sd_knowledge[,1])

```
